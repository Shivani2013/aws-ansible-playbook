 Create a simple S3 bucket
 - amazon.aws.s3_bucket:
    name: mys3bucket
    state: present
# Create a simple S3 bucket on Ceph Rados Gateway
- amazon.aws.s3_bucket: name: mys3bucket s3_url: http://your-ceph-rados-gateway-server.xxx ceph: true
# Remove an S3 bucket and any keys it contains
- amazon.aws.s3_bucket: name: mys3bucket state: absent force: yes
# Create a bucket, add a policy from a file, enable requester pays, enable versioning and tag
- amazon.aws.s3_bucket: name: mys3bucket policy: "{{ lookup('file','policy.json') }}" requester_pays: yes versioning: yes tags: example: tag1 another: 
      tag2
# Create a simple DigitalOcean Spaces bucket using their provided regional endpoint
- amazon.aws.s3_bucket: name: mydobucket s3_url: 'https://nyc3.digitaloceanspaces.com'
# Create a bucket with AES256 encryption
- amazon.aws.s3_bucket: name: mys3bucket state: present encryption: "AES256"
# Create a bucket with aws:kms encryption, KMS key
- amazon.aws.s3_bucket: name: mys3bucket state: present encryption: "aws:kms" encryption_key_id: "arn:aws:kms:us-east-1:1234/5678example"
# Create a bucket with aws:kms encryption, default key
- amazon.aws.s3_bucket: name: mys3bucket state: present encryption: "aws:kms"
# Create a bucket with public policy block configuration
- amazon.aws.s3_bucket: name: mys3bucket state: present public_access: BlockPublicAcls: true IgnorePublicAcls: true
        ## keys == 'false' can be ommited, undefined keys defaults to 'false'
        # BlockPublicPolicy: false RestrictPublicBuckets: false
# Delete public policy block from bucket
- amazon.aws.s3_bucket: name: mys3bucket state: present
    delete_public_access: true
